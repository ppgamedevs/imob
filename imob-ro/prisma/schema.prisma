// Add Prisma models for NextAuth (User, Account, Session, VerificationToken) and basic domain tables Area, Building, Listing, ListingMedia. Add useful indexes.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  agencyLogo    String?
  brandColor    String?
  role          String    @default("user") // user | agency | admin
  proTier       Boolean   @default(false)
  freeCredits   Int       @default(0)
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripeSubscriptionStatus String?
  stripeSubscriptionCurrentPeriodEnd DateTime?

  accounts Account[]
  sessions Session[]
  listings Listing[]
  analyses Analysis[]
  agentProfile AgentProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// --- domain minim (extindem ziua 3) ---
model Area {
  id      String @id @default(cuid())
  city    String
  name    String
  slug    String @unique
  polygon Json?
  stats   Json?

  buildings Building[]

  @@index([city, slug])
}

model Building {
  id      String  @id @default(cuid())
  areaId  String?
  address String
  geo     Json? // {lat, lng}

  area     Area?     @relation(fields: [areaId], references: [id])
  listings Listing[]

  @@index([areaId])
}

model Listing {
  id          String  @id @default(cuid())
  userId      String
  buildingId  String?
  type        String // apartment, house
  status      String  @default("draft") // draft|active|hidden|sold
  title       String?
  description String? @db.Text
  price       Int
  currency    String  @default("EUR")
  area_m2     Int
  rooms       Int
  floor       Int?
  year_built  Int?
  phone       String?
  source      String? // owner|agency|developer

  user     User           @relation(fields: [userId], references: [id])
  building Building?      @relation(fields: [buildingId], references: [id])
  media    ListingMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, price])
  @@index([userId])
  @@index([buildingId])
}

model ListingMedia {
  id        String @id @default(cuid())
  listingId String
  url       String
  kind      String @default("image") // image|plan|video
  width     Int?
  height    Int?
  order     Int    @default(0)

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
}

/// --- Link Analyzer Models (Day 2) ---
model Analysis {
  id           String   @id @default(cuid())
  userId       String?
  sourceUrl    String
  canonicalUrl String?
  status       String   @default("queued") // queued|extracting|normalizing|scoring|done|error
  error        String?
  groupId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user             User?             @relation(fields: [userId], references: [id])
  extractedListing ExtractedListing?
  featureSnapshot  FeatureSnapshot?
  scoreSnapshot    ScoreSnapshot?
  ttsLabel         TtsLabel?
  compMatches      CompMatch[]
  shortLinks       ShortLink[]
  claims           ListingClaim[]
  leads            Lead[]
  group            DedupGroup?       @relation(fields: [groupId], references: [id])
  sights           Sight[]
  photoAssets      PhotoAsset[]
  provenanceEvents ProvenanceEvent[]
  trustSnapshot    TrustSnapshot?

  @@index([sourceUrl])
  @@index([userId])
  @@index([canonicalUrl])
  @@index([groupId])
}

model ExtractedListing {
  id         String  @id @default(cuid())
  analysisId String  @unique
  title      String?
  price      Int?
  currency   String?
  areaM2     Int?
  rooms      Int?
  floor      Int?
  yearBuilt  Int?
  addressRaw String?
  lat        Float?
  lng        Float?
  photos     Json?
  sourceMeta Json?
  floorRaw   String?

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lat, lng])
}

model FeatureSnapshot {
  id         String @id @default(cuid())
  analysisId String @unique
  features   Json // normalized features

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScoreSnapshot {
  id             String @id @default(cuid())
  analysisId     String @unique
  avmLow         Float?
  avmHigh        Float?
  avmMid         Float?
  avmConf        Float?
  priceBadge     String?
  ttsBucket      String?
  yieldGross     Float?
  yieldNet       Float?
  riskSeismic    Float?
  riskClass      String?
  riskSource     String?
  condition      String?
  conditionScore Float?
  explain        Json?

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PriceHistory {
  id        String   @id @default(cuid())
  sourceUrl String
  ts        DateTime @default(now())
  price     Int
  currency  String

  @@index([sourceUrl])
  @@index([sourceUrl, ts])
}

model AreaDaily {
  id          String   @id @default(cuid())
  areaSlug    String
  date        DateTime @db.Date
  medianEurM2 Float?
  supply      Int?
  demandScore Float?
  stats       Json?

  @@unique([areaSlug, date])
  @@index([areaSlug])
  @@index([date])
}

// Events aggregated per-area per-day to compute demandScore
model AreaEvent {
  id       String   @id @default(cuid())
  areaSlug String
  date     DateTime @db.Date
  event    String   // view_report | save_report | share_pdf
  count    Int      @default(0)

  @@unique([areaSlug, date, event])
  @@index([areaSlug])
  @@index([date])
}

model SavedAnalysis {
  id         String   @id @default(cuid())
  userId     String
  analysisId String
  notes      String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([analysisId])
}

// track monthly generated reports per user for paywall enforcement
// ALSO: track individual actions for lead capture & share analytics
model ReportUsage {
  id         String   @id @default(cuid())
  userId     String   // can be "" for public/anonymous actions
  analysisId String
  action     String   // VIEW_SHARE, CONTACT_REQUEST, DOWNLOAD_PDF, SAVE_REPORT, or GENERATE_REPORT (paywall)
  meta       Json     @default("{}")
  createdAt  DateTime @default(now())
  
  // Legacy fields for paywall (keep for backward compat)
  month      String?  // YYYY-MM
  count      Int?     @default(0)

  @@index([userId])
  @@index([analysisId])
  @@index([action])
  @@index([createdAt])
}

model ShortLink {
  id         String    @id @default(cuid())
  slug       String    @unique
  targetUrl  String?   // optional - can construct dynamically from analysisId
  analysisId String
  userId     String    // owner who created the share link
  meta       Json      @default("{}")
  options    Json      @default("{}") // { scrub, watermark, hideSource, hidePrice, brand, color }
  enabled    Boolean   @default(true)
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@index([userId])
  @@index([createdAt])
  @@index([enabled])
}

// Time-to-sell labels derived from Analysis sourceUrl availability / sold detection
model TtsLabel {
  id         String   @id @default(cuid())
  analysisId String   @unique
  days       Int
  censored   Boolean  @default(false)
  createdAt  DateTime @default(now())

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
}

// Per-model calibration & evaluation metrics
model ModelMetrics {
  id         String   @id @default(cuid())
  ts         DateTime @default(now())
  modelName  String
  mdape      Float
  piCoverage Float   // fraction of true prices inside AVM prediction interval
  sampleCount Int
  details    Json?
  createdAt  DateTime @default(now())

  @@index([modelName, ts])
}

model Feedback {
  id         String   @id @default(cuid())
  analysisId String
  userId     String?
  sold       Boolean
  price      Int?
  notes      String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([analysisId])
  @@index([userId])
}

// API audit logs for security and debugging
model ApiAudit {
  id        String   @id @default(cuid())
  ts        DateTime @default(now())
  ip        String?
  userId    String?
  endpoint  String
  action    String
  details   Json?

  @@index([endpoint, ts])
  @@index([userId])
}

model AlertRule {
  id           String   @id @default(cuid())
  userId       String
  analysisId   String?
  areaSlug     String?
  type         String   // "PRICE_BELOW" | "UNDERPRICED" | "NEW_LISTINGS"
  params       Json?
  isActive     Boolean  @default(true)
  lastFiredAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([analysisId])
  @@index([areaSlug])
}

model CompMatch {
  id         String   @id @default(cuid())
  analysisId String
  compId     String?
  sourceUrl  String?
  title      String?
  photo      String?
  lat        Float?
  lng        Float?
  distanceM  Int?
  priceEur   Int?
  areaM2     Float?
  rooms      Float?
  yearBuilt  Int?
  eurM2      Float?
  score      Float?
  createdAt  DateTime @default(now())

  Analysis   Analysis @relation(fields: [analysisId], references: [id])

  @@index([analysisId])
  @@index([eurM2])
}

// Day 16 - Agencies & Contact v1
model AgentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  handle      String   @unique      // ex: prenume-nume
  fullName    String
  agencyName  String?
  phone       String?
  avatarUrl   String?
  licenseId   String?
  websiteUrl  String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  claims      ListingClaim[]

  @@index([handle])
}

model ListingClaim {
  id          String   @id @default(cuid())
  analysisId  String
  agentId     String   // AgentProfile.id
  status      String   @default("pending") // pending|approved|rejected
  note        String?
  createdAt   DateTime @default(now())
  decidedAt   DateTime?
  decidedBy   String?

  analysis    Analysis      @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  agent       AgentProfile  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@index([agentId])
  @@unique([analysisId, agentId])
}

model Lead {
  id          String   @id @default(cuid())
  analysisId  String
  assignedTo  String?  // User.id (agentul/owner ul)
  name        String
  email       String
  phone       String?
  message     String?
  source      String?  // "share", "report", "widget"
  createdAt   DateTime @default(now())

  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@index([assignedTo])
}

// Day 17 - Import & Crawl v1
model ImportBatch {
  id          String   @id @default(cuid())
  userId      String
  source      String   // "csv" | "paste" | "seed"
  filename    String?
  total       Int      @default(0)
  accepted    Int      @default(0)
  skipped     Int      @default(0)
  createdAt   DateTime @default(now())
  items       ImportItem[]

  @@index([userId, createdAt])
}

model ImportItem {
  id          String   @id @default(cuid())
  batchId     String
  url         String
  normalized  String
  status      String   @default("queued") // queued|scheduled|analyzed|skipped|error
  reason      String?
  analysisId  String?
  createdAt   DateTime @default(now())

  batch       ImportBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([normalized])
  @@index([status, createdAt])
  @@unique([batchId, normalized])
}

// Day 17 - Import & Crawl v1 (extended Day 25 for discovery + details)
model CrawlJob {
  id          String    @id @default(cuid())
  url         String
  normalized  String    @unique
  domain      String
  kind        String    @default("detail") // "discover" | "detail"
  status      String    @default("queued") // queued|running|fetching|done|error
  priority    Int       @default(0)
  tries       Int       @default(0)
  lastError   String?
  scheduledAt DateTime  @default(now())
  lockedAt    DateTime?
  doneAt      DateTime?
  updatedAt   DateTime  @updatedAt
  analysisId  String?

  @@index([status, priority, scheduledAt])
  @@index([domain, status])
}

// Day 18 - Extractor Profiles v1
model ExtractorProfile {
  id          String   @id @default(cuid())
  domain      String   @unique
  active      Boolean  @default(true)
  // JSON با config: { selectors, attrMaps, transforms, notes }
  rules       Json
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([active])
}

model ExtractLog {
  id          String   @id @default(cuid())
  url         String
  domain      String
  profileId   String?
  ok          Boolean
  error       String?
  fields      Json?
  createdAt   DateTime @default(now())

  @@index([domain, createdAt])
  @@index([profileId, createdAt])
}

// Day 19 - De-dup & Merge v1
model DedupGroup {
  id           String    @id @default(cuid())
  signature    String    @unique
  city         String?
  areaSlug     String?
  centroidLat  Float?
  centroidLng  Float?
  canonicalUrl String?
  itemCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  analyses    Analysis[]
  edges       DedupEdge[]
  snapshots   GroupSnapshot[]

  @@index([city, areaSlug])
}

model DedupEdge {
  id           String   @id @default(cuid())
  groupId      String
  analysisId   String
  score        Float
  reason       Json
  createdAt    DateTime @default(now())

  group        DedupGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, analysisId])
  @@index([groupId])
}

model GroupSnapshot {
  id          String   @id @default(cuid())
  groupId     String
  // Canonical "current" state
  title       String?
  priceEur    Int?
  areaM2      Int?
  rooms       Float?
  floorRaw    String?
  yearBuilt   Int?
  lat         Float?
  lng         Float?
  photo       String?
  // Derived aggregates
  domains     Json      // string[]
  priceMin    Int?
  priceMax    Int?
  sources     Int?      // count distinct domains
  explain     Json      // { picked: analysisId, sampleCount: N }
  createdAt   DateTime  @default(now())

  group       DedupGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, createdAt])
}

// Day 20 - Provenance & Fraud-Shield v1
model Sight {
  id          String   @id @default(cuid())
  analysisId  String
  groupId     String?
  sourceUrl   String
  domain      String
  title       String?
  priceEur    Int?
  areaM2      Int?
  rooms       Float?
  contact     String?
  seenAt      DateTime @default(now())

  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId, seenAt])
  @@index([domain, seenAt])
}

model PhotoAsset {
  id          String   @id @default(cuid())
  analysisId  String
  src         String
  width       Int?
  height      Int?
  phash       String?
  createdAt   DateTime @default(now())

  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@index([phash])
}

model ProvenanceEvent {
  id          String   @id @default(cuid())
  analysisId  String
  kind        String
  payload     Json
  happenedAt  DateTime @default(now())

  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId, happenedAt])
  @@index([kind, happenedAt])
}

model TrustSnapshot {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  score       Int
  badge       String
  reasons     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model ShareEvent {
  id         String   @id @default(cuid())
  slug       String
  analysisId String
  ts         DateTime @default(now())
  referrer   String?
  ua         String?
  ipHash     String?

  @@index([slug, ts])
  @@index([analysisId, ts])
}

model ShareDaily {
  id      String   @id @default(cuid())
  slug    String
  date    DateTime // 00:00 UTC
  views   Int      @default(0)
  uniques Int      @default(0)

  @@unique([slug, date])
  @@index([slug, date])
}

// Day 23 - Billing & Paywall v1
model Plan {
  id          String   @id @default(cuid())
  code        String   @unique // "free" | "pro"
  name        String
  priceCents  Int      // lunar
  currency    String   @default("EUR")
  stripePrice String?  // price_***
  features    Json
  createdAt   DateTime @default(now())
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String    @unique
  planCode     String    // "free" | "pro"
  status       String    // "active" | "trialing" | "past_due" | "canceled"
  stripeSubId  String?
  renewsAt     DateTime?
  cancelAt     DateTime?
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())

  @@index([planCode, status])
}

model UsageCounter {
  id          String   @id @default(cuid())
  userId      String
  periodStart DateTime // început lună UTC
  kind        String   // "analyze" | "pdf" | "share"
  count       Int      @default(0)

  @@unique([userId, periodStart, kind])
  @@index([userId, kind])
}

// Day 25 - Crawler & Refresh v1
model ListingSource {
  id         String   @id @default(cuid())
  domain     String   @unique
  enabled    Boolean  @default(true)
  minDelayMs Int      @default(2000) // throttling per host
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FetchLog {
  id         String   @id @default(cuid())
  url        String
  domain     String
  statusCode Int?
  etag       String?
  lastMod    String?
  bytes      Int?
  error      String?
  fetchedAt  DateTime @default(now())

  @@index([domain, fetchedAt])
  @@index([url])
}

model UrlCache {
  url       String   @id
  etag      String?
  lastMod   String?
  updatedAt DateTime @updatedAt
}

// Day 28 - Owner Pricing Wizard & Lead Magnet
model OwnerLead {
  id          String   @id @default(cuid())
  userId      String?  // if logged in
  email       String?
  phone       String?
  // owner input (normalized, 100% voluntary)
  city        String   @default("București")
  areaSlug    String?
  addressHint String?
  lat         Float?
  lng         Float?
  rooms       Float?
  areaM2      Float?
  yearBuilt   Int?
  conditionScore Float?  // if checked "needs/ok/modern"
  notes       String?
  // calculations
  avmLow      Int?
  avmMid      Int?
  avmHigh     Int?
  ttsBucket   String?
  estRent     Int?
  yieldNet    Float?
  priceSuggested Int?
  // funnel states
  status      String   @default("new") // new|contacted|won|lost
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events      OwnerLeadEvent[]

  @@index([status, createdAt])
  @@index([city, areaSlug])
}

model OwnerLeadEvent {
  id        String   @id @default(cuid())
  leadId    String
  kind      String   // view|submit|calc|pdf|share
  meta      Json?
  ts        DateTime @default(now())

  lead      OwnerLead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId, ts])
}
