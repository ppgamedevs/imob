// Add Prisma models for NextAuth (User, Account, Session, VerificationToken) and basic domain tables Area, Building, Listing, ListingMedia. Add useful indexes.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  agencyLogo    String?
  brandColor    String?
  role          String    @default("user") // user | agency | admin
  proTier       Boolean   @default(false)
  freeCredits   Int       @default(0)
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripeSubscriptionStatus String?
  stripeSubscriptionCurrentPeriodEnd DateTime?

  accounts Account[]
  sessions Session[]
  listings Listing[]
  analyses Analysis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// --- domain minim (extindem ziua 3) ---
model Area {
  id      String @id @default(cuid())
  city    String
  name    String
  slug    String @unique
  polygon Json?
  stats   Json?

  buildings Building[]

  @@index([city, slug])
}

model Building {
  id      String  @id @default(cuid())
  areaId  String?
  address String
  geo     Json? // {lat, lng}

  area     Area?     @relation(fields: [areaId], references: [id])
  listings Listing[]

  @@index([areaId])
}

model Listing {
  id          String  @id @default(cuid())
  userId      String
  buildingId  String?
  type        String // apartment, house
  status      String  @default("draft") // draft|active|hidden|sold
  title       String?
  description String? @db.Text
  price       Int
  currency    String  @default("EUR")
  area_m2     Int
  rooms       Int
  floor       Int?
  year_built  Int?
  phone       String?
  source      String? // owner|agency|developer

  user     User           @relation(fields: [userId], references: [id])
  building Building?      @relation(fields: [buildingId], references: [id])
  media    ListingMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, price])
  @@index([userId])
  @@index([buildingId])
}

model ListingMedia {
  id        String @id @default(cuid())
  listingId String
  url       String
  kind      String @default("image") // image|plan|video
  width     Int?
  height    Int?
  order     Int    @default(0)

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
}

/// --- Link Analyzer Models (Day 2) ---
model Analysis {
  id           String   @id @default(cuid())
  userId       String?
  sourceUrl    String
  canonicalUrl String?
  status       String // pending|completed|failed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user             User?             @relation(fields: [userId], references: [id])
  extractedListing ExtractedListing?
  featureSnapshot  FeatureSnapshot?
  scoreSnapshot    ScoreSnapshot?
  ttsLabel         TtsLabel?

  @@index([sourceUrl])
  @@index([userId])
}

model ExtractedListing {
  id         String  @id @default(cuid())
  analysisId String  @unique
  title      String?
  price      Int?
  currency   String?
  areaM2     Int?
  rooms      Int?
  floor      Int?
  yearBuilt  Int?
  addressRaw String?
  lat        Float?
  lng        Float?
  photos     Json?

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([lat, lng])
}

model FeatureSnapshot {
  id         String @id @default(cuid())
  analysisId String @unique
  features   Json // normalized features

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model ScoreSnapshot {
  id             String @id @default(cuid())
  analysisId     String @unique
  avmLow         Float
  avmHigh        Float
  avmConf        Float
  ttsBucket      String
  yieldGross     Float?
  yieldNet       Float?
  riskSeismic    Float?
  riskSeismicUrl String?
  conditionScore Float?

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model PriceHistory {
  id        String   @id @default(cuid())
  sourceUrl String
  ts        DateTime
  price     Int
  currency  String

  @@index([sourceUrl])
  @@index([sourceUrl, ts])
}

model AreaDaily {
  id          String   @id @default(cuid())
  areaSlug    String
  date        DateTime @db.Date
  medianEurM2 Float
  supply      Int
  demandScore Float

  @@unique([areaSlug, date])
  @@index([areaSlug])
  @@index([date])
}

// Events aggregated per-area per-day to compute demandScore
model AreaEvent {
  id       String   @id @default(cuid())
  areaSlug String
  date     DateTime @db.Date
  event    String   // view_report | save_report | share_pdf
  count    Int      @default(0)

  @@unique([areaSlug, date, event])
  @@index([areaSlug])
  @@index([date])
}

model SavedAnalysis {
  id         String   @id @default(cuid())
  userId     String
  analysisId String
  notes      String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([analysisId])
}

// track monthly generated reports per user for paywall enforcement
model ReportUsage {
  id        String   @id @default(cuid())
  userId    String
  month     String   // YYYY-MM
  count     Int      @default(0)

  @@unique([userId, month])
  @@index([userId])
}

model ShortLink {
  id        String   @id @default(cuid())
  slug      String   @unique
  targetUrl String
  createdAt DateTime @default(now())
}

// Time-to-sell labels derived from Analysis sourceUrl availability / sold detection
model TtsLabel {
  id         String   @id @default(cuid())
  analysisId String   @unique
  days       Int
  censored   Boolean  @default(false)
  createdAt  DateTime @default(now())

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
}

// Per-model calibration & evaluation metrics
model ModelMetrics {
  id         String   @id @default(cuid())
  ts         DateTime @default(now())
  modelName  String
  mdape      Float
  piCoverage Float   // fraction of true prices inside AVM prediction interval
  sampleCount Int
  details    Json?
  createdAt  DateTime @default(now())

  @@index([modelName, ts])
}

model Feedback {
  id         String   @id @default(cuid())
  analysisId String
  userId     String?
  sold       Boolean
  price      Int?
  notes      String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([analysisId])
  @@index([userId])
}

// API audit logs for security and debugging
model ApiAudit {
  id        String   @id @default(cuid())
  ts        DateTime @default(now())
  ip        String?
  userId    String?
  endpoint  String
  action    String
  details   Json?

  @@index([endpoint, ts])
  @@index([userId])
}
